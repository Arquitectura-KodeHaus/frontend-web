name: ci-frontend

on:
  push:
    branches: [ develop, prod ]
  pull_request:
    branches: [ prod ]

env:
  REGION: us-central1
  ARTIFACT_REPO: apps
  IMAGE_NAME: frontend-web
  SERVICE_NAME: frontend-web
  NODE_VERSION: '18'

jobs:
  build_and_push:
    name: Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.ref_name == 'develop' || github.ref_name == 'prod'
    
    # ConfiguraciÃ³n para que todos los comandos se ejecuten en el subdirectorio plazapp
    defaults:
      run:
        working-directory: ./plazapp

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps (lockfile-aware)
        run: |
          cd plazapp
          if [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm
            pnpm install
          elif [ -f yarn.lock ]; then
            npm i -g yarn
            yarn install --frozen-lockfile || yarn install
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
        working-directory: .

      - name: Build Angular
        run: |
          CONFIG=$([ "${{ github.ref_name }}" = "prod" ] && echo "production" || echo "staging")
          npm run build -- --configuration=$CONFIG

      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account:         ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        working-directory: .
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build image
        working-directory: .
        run: |
          docker build \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:latest \
            ./plazapp

      - name: Push image
        working-directory: .
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy to Cloud Run
    needs: build_and_push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: ${{ github.ref_name == 'prod' && 'production' || 'staging' }}
      url:  ${{ steps.deploy.outputs.url }}

    steps:
      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account:         ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - id: deploy
        name: Cloud Run deploy
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image "$IMAGE" \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account="${{ secrets.RUNTIME_SA_FRONTEND }}" \
            --set-env-vars="FIRESTORE_PROJECT=${{ secrets.GCP_PROJECT_ID }}" \
            --quiet
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"
